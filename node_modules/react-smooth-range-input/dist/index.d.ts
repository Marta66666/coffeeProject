import * as React from 'react';
interface Props {
    min: number;
    max: number;
    value?: number;
    hasTickMarks?: boolean;
    onChange?: (number: any) => void;
    disabled?: boolean;
    padding?: number;
    barColor?: string;
    textColor?: string;
    textBackgroundColor?: string;
    tickColor?: string;
    customController?: ({ ref: any, value: number }: {
        ref: any;
        value: any;
    }) => React.ReactNode;
    shouldAnimateOnTouch?: boolean;
    shouldDisplayValue?: boolean;
    shouldAnimateNumber?: boolean;
    controllerWidth?: number;
    controllerHeight?: number;
    barHeight?: number;
    barStyle: {
        string: number | string;
    };
    focusStyle?: string;
}
interface State {
    dragX: number;
    showBubble: boolean;
    isFocusing: boolean;
}
export default class Slider extends React.PureComponent<Props, State> {
    static defaultProps: {
        value: number;
        onChange: () => void;
        barColor: string;
        textColor: string;
        textBackgroundColor: string;
        tickColor: string;
        disabled: boolean;
        padding: number;
        hasTickMarks: boolean;
        shouldAnimateOnTouch: boolean;
        shouldDisplayValue: boolean;
        shouldAnimateNumber: boolean;
        customController: any;
        controllerWidth: number;
        controllerHeight: number;
        barHeight: number;
        barStyle: {};
    };
    state: {
        dragX: number;
        showBubble: boolean;
        isFocusing: boolean;
    };
    isControlByKeyBoard: boolean;
    wrapperRef: any;
    controllerRootRef: any;
    touchDevice: boolean;
    controllerRef: any;
    maxScrollDistance: number;
    arrowKeyPerClickDistance: number;
    controllerHeight: number;
    controllerWidth: number;
    clientX: number;
    value: number;
    isTouching: boolean;
    timer: any;
    totalStepsNumber: number;
    calculatePositionWithOffset: any;
    restoreTouchMove: () => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    onResize: () => void;
    commonOnStart: any;
    onTouchStart: any;
    onMouseDown: any;
    onInteractEnd: any;
    onTouchMove: any;
    onMouseMove: (e: MouseEvent) => void;
    onFocus: () => void;
    onBlur: () => void;
    onClick: (e: any) => void;
    onKeyEvent: (e: KeyboardEvent) => void;
    calculateValueAndUpdateStore(shouldTriggerOnChange?: boolean): void;
    render(): JSX.Element;
}
export {};
